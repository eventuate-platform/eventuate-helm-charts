apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mysql.fullname" . }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "mysql.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "mysql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mysql.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mysql.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3306
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - bash
              - -c
              - "/healthcheck.sh"
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - "/healthcheck.sh"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
          env:
          {{ if .Values.createDefaultCredentialsSecret }}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.fullname" . }}-database-credentials
                  key: rootPassword
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.fullname" . }}-database-credentials
                  key: mysqlUser
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.fullname" . }}-database-credentials
                  key: mysqlPassword
          {{ end }}    
          {{ if gt (len .Values.envSecretKeyRefs) 0 }}
            {{- range .Values.envSecretKeyRefs }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secret.name }}
                  key: {{ .secret.key }}
            {{- end }}
          {{ end }}    
            - name: MYSQL_DATABASE
          {{ if .Values.mysqlDatabase }}
              value:  {{ .Values.mysqlDatabase }}
          {{ else }}
              value:  {{ include "mysql.fullname" . | replace "-" "_" }}
          {{ end }}    
          volumeMounts:
{{- if .Values.persistentStorage }}          
            - name: {{ include "mysql.fullname" . }}-persistent-storage
              mountPath: /var/lib/mysql
{{- end }}
            - name: mysql-configmap-volume
              mountPath: /etc/my.cnf
              subPath: my.cnf
            - name: mysql-init-volume
              mountPath: /docker-entrypoint-initdb.d
              #defaultMode: 0755
      volumes:
      - name: mysql-configmap-volume
        configMap:
          name: {{ include "mysql.fullname" . }}-mysql-configmap
          items:
          - key: my.cnf
            path: my.cnf
      - name: mysql-init-volume
        configMap:
          name: {{ include "mysql.fullname" . }}-mysql-init
{{- if .Values.persistentStorage }}          
  volumeClaimTemplates:
  - metadata:
      name: {{ include "mysql.fullname" . }}-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mysql.fullname" . }}-mysql-configmap
data:
  my.cnf: |
      [mysqld]
      log-bin=mysql-bin
      server-id=1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mysql.fullname" . }}-mysql-init
data:
  # This needs to be setup in a shell script to read environment variable
  6.configure-users.sql: |
    CREATE USER 'root'@'%' IDENTIFIED BY 'rootpassword';
    GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION ;
    GRANT PROXY ON ''@'' TO 'root'@'%' WITH GRANT OPTION ;

