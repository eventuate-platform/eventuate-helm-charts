apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
              protocol: TCP
          # livenessProbe:
          #   exec:
          #     command:
          #     - bash
          #     - -c
          #     - "/healthcheck.sh"
          # readinessProbe:
          #   exec:
          #     command:
          #     - bash
          #     - -c
          #     - "/healthcheck.sh"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
          env:
          {{ if .Values.createDefaultCredentialsSecret }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-database-credentials
                  key: postgresUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-database-credentials
                  key: postgresPassword
          {{ end }}    
          {{ if gt (len .Values.envSecretKeyRefs) 0 }}
            {{- range .Values.envSecretKeyRefs }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secret.name }}
                  key: {{ .secret.key }}
            {{- end }}
          {{ end }}    
            - name: POSTGRES_DB
          {{ if .Values.postgresDatabase }}
              value:  {{ .Values.postgresDatabase }}
          {{ else }}
              value:  {{ include "postgres.fullname" . | replace "-" "_" }}
          {{ end }}    
          volumeMounts:
{{- if .Values.persistentStorage }}          
            - name: {{ include "postgres.fullname" . }}-persistent-storage
              mountPath: /var/lib/postgresql/data
{{- end }}
{{- if .Values.persistentStorage }}          
  volumeClaimTemplates:
  - metadata:
      name: {{ include "postgres.fullname" . }}-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
{{- end }}

